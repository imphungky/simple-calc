[{"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\index.js":"1","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\App.js":"2","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\reportWebVitals.js":"3","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Reducers\\allReducers.js":"4","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Confirmation.js":"5","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Profile.js":"6","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Login.js":"7","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Register.js":"8","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\AwaitingVerification.js":"9","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\Nav.js":"10","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\LandingPage.js":"11","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\ProtectedRoutes.js":"12","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\authActions.js":"13","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\userActions.js":"14","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\Calculator.js":"15","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\Courses.js":"16","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\addCourse.js":"17","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\errorActions.js":"18","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\courseActions.js":"19","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Reducers\\userReducer.js":"20","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Reducers\\errorReducers.js":"21","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\utils\\accessToken.js":"22","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\addCourseModal.js":"23","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\utils\\setAuth.js":"24","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\utils\\axiosConfig.js":"25"},{"size":528,"mtime":1611315382437,"results":"26","hashOfConfig":"27"},{"size":1805,"mtime":1611422742130,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":247,"mtime":1611180194771,"results":"30","hashOfConfig":"27"},{"size":1151,"mtime":1611428171209,"results":"31","hashOfConfig":"27"},{"size":6000,"mtime":1611803700542,"results":"32","hashOfConfig":"27"},{"size":5279,"mtime":1611426075751,"results":"33","hashOfConfig":"27"},{"size":6647,"mtime":1611803700543,"results":"34","hashOfConfig":"27"},{"size":2096,"mtime":1611474462923,"results":"35","hashOfConfig":"27"},{"size":2160,"mtime":1611803700545,"results":"36","hashOfConfig":"27"},{"size":1542,"mtime":1611518931260,"results":"37","hashOfConfig":"27"},{"size":1032,"mtime":1611803700545,"results":"38","hashOfConfig":"27"},{"size":1186,"mtime":1611610872458,"results":"39","hashOfConfig":"27"},{"size":3903,"mtime":1611532386317,"results":"40","hashOfConfig":"27"},{"size":6184,"mtime":1611803700544,"results":"41","hashOfConfig":"27"},{"size":2168,"mtime":1611803700544,"results":"42","hashOfConfig":"27"},{"size":505,"mtime":1611803700546,"results":"43","hashOfConfig":"27"},{"size":223,"mtime":1610423983194,"results":"44","hashOfConfig":"27"},{"size":1471,"mtime":1611474630173,"results":"45","hashOfConfig":"27"},{"size":2414,"mtime":1611787513976,"results":"46","hashOfConfig":"27"},{"size":865,"mtime":1611181201206,"results":"47","hashOfConfig":"27"},{"size":343,"mtime":1611419912789,"results":"48","hashOfConfig":"27"},{"size":1573,"mtime":1611474648187,"results":"49","hashOfConfig":"27"},{"size":401,"mtime":1611427962966,"results":"50","hashOfConfig":"27"},{"size":133,"mtime":1612042211266,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"d1x84g",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\index.js",["114"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from \"axios\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["115","116"],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\App.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\reportWebVitals.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Reducers\\allReducers.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Confirmation.js",["117"],"import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {verify} from \"../../Actions/userActions.js\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {\r\n    Flex,\r\n    Heading\r\n} from \"@chakra-ui/react\";\r\nfunction Confirmation({match, verified, verify}) {\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(!verified) {\r\n            verify(match.params.id);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                history.push(\"/login\");\r\n            }, 1000);\r\n        }\r\n    }, [verified])\r\n\r\n\r\n\r\n    return (\r\n    <Flex container direction=\"column\" justify=\"center\" alignContent=\"center\" alignItems=\"center\" >\r\n        <Heading as=\"h3\">\r\n        Thank you for verifying, you will be redirected shortly\r\n        </Heading>\r\n    </Flex>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        verified: state.user.verified\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        verify: (id) => {\r\n            dispatch(verify(id));\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Confirmation);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Profile.js",["118"],"import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Calculator from '../Specialized/Calculator.js';\r\nimport Courses from \"../Specialized/Courses.js\";\r\nimport AddCourse from \"../Specialized/addCourse.js\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport authAction from \"../../Actions/authActions\";\r\nimport {addCourse, deleteCourse} from \"../../Actions/courseActions.js\";\r\nimport {\r\n    Flex, \r\n    SimpleGrid,\r\n    Box,\r\n    Tabs, \r\n    TabList, \r\n    TabPanels, \r\n    Tab, \r\n    TabPanel,\r\n    Badge,\r\n    Spinner,\r\n    SlideFade\r\n} from \"@chakra-ui/react\";\r\nimport { expiredSession } from \"../../Actions/userActions.js\";\r\n\r\n\r\nfunction Profile({grades, verified, authAction,isLoaded, isLogged, expiredSession}) {\r\n    const [displaycourses, setCourses] = useState([]);\r\n    const [modifycourse, setmodify] = useState();\r\n    const [showcourses, setshowcourses] = useState(() => true);\r\n\r\n    const history = useHistory();\r\n    /*\r\n\r\n    All button handlers get handled in this function and pass in a type\r\n    to differentiate the different buttons that were activated to know what action to handle\r\n\r\n\r\n    */\r\n    function redirect(e, type) {\r\n        //set our current state to which distinct course the user wants to edit\r\n        if(type === \"MODIFY\") {\r\n            const id = e.currentTarget.value;\r\n            setmodify(displaycourses[id]);\r\n            setshowcourses(false);\r\n        }\r\n        //get course id from the button clicked and dispatch the delete action\r\n        //update local state, unsure if this is necessary as the action should update the state as well but this ensures it\r\n        else if(type === \"REMOVE\") {\r\n            const id = e.currentTarget.value;\r\n            let params = [displaycourses[id], id];\r\n            dispatchauth(authAction, deleteCourse, params);\r\n        }\r\n        //add a new course and dispatch the action to add it to the database\r\n        else if(type === \"ADD\") {\r\n           let info = {\r\n               grades: [[\"\", \"\"], [\"\", \"\"], [\"\", \"\"]],\r\n               coursename: e.currentTarget.value,\r\n               finalgrade: -1,\r\n           }\r\n           let params = [info];\r\n           dispatchauth(authAction, addCourse, params);\r\n        }\r\n        \r\n    }\r\n\r\n    function gradeColour(grade) {\r\n        grade = Math.floor(grade);\r\n        if(0 <= grade && grade < 60) {\r\n          return \"#ff0000\";\r\n        }\r\n        else if(60 <= grade && grade <= 75) {\r\n          return \"#fff133\";\r\n        }\r\n        else if(76 <= grade && grade <= 100) {\r\n          return \"#89ff57\";\r\n        }\r\n        else {\r\n            return \"white\";\r\n        }\r\n      }\r\n\r\n    /*\r\n    Takes the courses we have in state and renders it\r\n    */\r\n    function renderCourses() {\r\n        let display = [];\r\n        if(displaycourses.length > 0) {\r\n            for(var i = 0; i < displaycourses.length; i++) {\r\n                // display.push( <Grid item key={\"Grid\" + i} m={6} lg={4}><Courses handler={redirect} key={i} index={i} course={displaycourses[i]}/></Grid>);\r\n                display.push(<Courses handler={redirect} key={i} index={i} course={displaycourses[i]} gradeColour={gradeColour} />)\r\n            }\r\n        }\r\n        display.push(<AddCourse handler={redirect}/>);\r\n        return display;\r\n    }\r\n    \r\n    /*\r\n    If the user is already authorized/loggedin redirect them outside\r\n    */\r\n\r\n    useEffect(() => {\r\n        if(isLoaded) {\r\n            setCourses(grades);\r\n        }\r\n        if(isLoaded && !verified) {\r\n            history.push(\"/verify\");\r\n        }\r\n        if(isLoaded && !isLogged) {\r\n            history.push(\"/\");\r\n        }\r\n    },[isLoaded, verified, history, grades, isLogged]);\r\n    \r\n    //parse grades but only keep the final grade and the course name\r\n    \r\n    return (\r\n    <Box aligntItems=\"center\" alignContent=\"center\" justify=\"center\" mt=\"15\" w=\"100%\" h=\"100%\">\r\n        {isLoaded && <Tabs variant=\"soft-rounded\" colorScheme=\"blue\" align=\"center\" p=\"5\">\r\n            <TabList>\r\n                <Tab onClick={() => setshowcourses(true)}>\r\n                    Courses\r\n                </Tab>\r\n                <Tab>\r\n                    Overview <Badge ml=\"2\" variant=\"subtle\" colorScheme=\"yellow\" >Coming Soon</Badge>\r\n                </Tab>\r\n            </TabList>\r\n            <TabPanels>\r\n            <TabPanel>\r\n                <Flex justify=\"center\" w=\"100%\" h={[\"100%\"]}>\r\n                {showcourses && <SimpleGrid columns={{sm: 1, md: 2, lg: 3}} w={[\"90%\", \"90%\", \"80%\", \"50%\"]} spacing={3}>\r\n                    {renderCourses()}\r\n                </SimpleGrid>}\r\n                {!showcourses && <Calculator key={0} handle={setshowcourses} course={modifycourse} gradeColour={gradeColour} />}\r\n                </Flex>\r\n            </TabPanel>\r\n            <TabPanel>\r\n                <p>\r\n                    Coming Soon!\r\n                </p>\r\n            </TabPanel>\r\n        </TabPanels>\r\n        </Tabs>}\r\n        {!isLoaded && \r\n        <Flex h=\"100vh\" alignContent=\"center\" alignItems=\"center\" justify=\"center\"><Spinner size=\"xl\"/></Flex>}\r\n    </Box>\r\n    );\r\n\r\n}\r\n\r\n\r\nasync function dispatchauth(authAction, action, params) {\r\n    authAction(action, params);\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    /*\r\n    our courses should be an objects as such\r\n    {\r\n        grades: [['], [']]\r\n        username: String,\r\n        coursename: String,\r\n        finalgrade: number\r\n    }\r\n\r\n    */\r\n    return {\r\n        grades: state.user.grades,\r\n        verified: state.user.verified,\r\n        isLoading: state.user.isLoading,\r\n        isLoaded: state.user.isLoaded,\r\n        isLogged: state.user.isLogged\r\n    }\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        authAction: (action, params) => {\r\n            dispatch(authAction(action, params));\r\n        },\r\n        expiredSession: () => {\r\n            dispatch(expiredSession());\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Login.js",["119","120"],"import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, loadUser} from \"../../Actions/userActions.js\";\r\nimport {clearErr} from \"../../Actions/errorActions.js\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {\r\n    ArrowForwardIcon,\r\n    InfoIcon,\r\n    LockIcon,\r\n    ViewIcon,\r\n    ViewOffIcon\r\n} from \"@chakra-ui/icons\";\r\nimport {\r\n    Center, \r\n    Flex, \r\n    Input, \r\n    Stack,\r\n    InputLeftAddon,\r\n    InputRightElement,\r\n    InputGroup,\r\n    Button,\r\n    IconButton,\r\n    FormControl,\r\n    Heading,\r\n    SlideFade,\r\n    Alert,\r\n    AlertIcon,\r\n    AlertTitle,\r\n    AlertDescription,\r\n    Box\r\n} from \"@chakra-ui/react\";\r\nimport {Formik, Field, Form} from \"formik\";\r\n\r\nfunction Login({isLogged, loadUser, login, invalidUser, invalidPass, clearErr}) {\r\n    const history = useHistory();\r\n    const[passwordview, setpasswordview] = useState(()=> false);\r\n    function validateUser(value) {\r\n        let error\r\n        if(!value) {\r\n            error = \"Username is required\";\r\n        }\r\n        return error;\r\n    }\r\n    function validatePass(value) {\r\n        let error\r\n        if(!value) {\r\n            error = \"Password is required\";\r\n        }\r\n        return error;\r\n    }\r\n\r\n    async function handlesubmit(user, pass) {\r\n        login(user, pass);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isLogged) {\r\n            history.push(\"/profile\");\r\n        }\r\n    },[isLogged, history]);\r\n\r\n    return (\r\n        <SlideFade in>\r\n        <Center>\r\n        <Flex direction=\"column\" align=\"center\" justify=\"center\" width=\"s\" height=\"lg\">\r\n            <Heading as=\"h4\" p=\"3\">\r\n                Login\r\n            </Heading>\r\n            <Formik\r\n                initialValues={{username: \"\", password: \"\"}}\r\n                onSubmit={(values, actions) => {\r\n                    setTimeout(() => {\r\n                        clearErr();\r\n                        actions.setSubmitting(true);\r\n                        handlesubmit(values.username, values.password);\r\n                        actions.setSubmitting(false);\r\n                    }, 200)\r\n                }}\r\n                \r\n            >\r\n                {props => (\r\n                    <Form>\r\n                        <Stack spacing={2}>\r\n                        <Field name=\"username\"  validate={validateUser} >\r\n                            {({field, form}) => (\r\n                                <FormControl isInvalid={form.errors.username && form.touched.username}>\r\n                                    <InputGroup>\r\n                                        <InputLeftAddon children={<InfoIcon />}/>\r\n                                            <Input {...field} id=\"username\" placeholder=\"Username\"/>\r\n                                        </InputGroup>\r\n                                </FormControl>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"password\"  validate={validatePass}>\r\n                            {({field, form}) => (\r\n                                <FormControl isInvalid={form.errors.password && form.touched.password}>\r\n                                    <InputGroup>\r\n                                        <InputLeftAddon children={<LockIcon />}/>\r\n                                            <Input {...field} type={passwordview ? \"text\" :\"password\"} placeholder=\"Password\" id=\"password\" />\r\n                                        <InputRightElement>\r\n                                            <IconButton variant=\"ghost\" onClick={() => setpasswordview(!passwordview)} icon={passwordview? <ViewIcon /> : <ViewOffIcon />} />                                        </InputRightElement>\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                            )}\r\n                        </Field>\r\n                        <Button isLoading={props.isSubmitting} rightIcon={<ArrowForwardIcon boxSize={5}/>} type=\"submit\">\r\n                        </Button>\r\n                        </Stack>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Flex>\r\n        </Center>\r\n        <Flex justify=\"center\" w=\"100%\">\r\n            <Box w={[\"50%\",\"30%\",\"15%\"]}>\r\n            {invalidUser && <Alert status=\"error\" variant=\"top-accent\"> <AlertIcon /> <AlertTitle>User does not exist</AlertTitle> </Alert>}\r\n            {invalidPass && <Alert status=\"error\" variant=\"top-accent\"> <AlertIcon /> <AlertTitle>Incorrect Password</AlertTitle> </Alert>}\r\n            </Box>\r\n        </Flex>\r\n        </SlideFade>\r\n    );\r\n}\r\n\r\nasync function SubmitForm(login, username, password) {\r\n    login(username, password);\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isLogged: state.user.isLogged,\r\n        invalidUser: state.error.invalidUser,\r\n        invalidPass: state.error.invalidPass\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        login: (username, password) => {\r\n            dispatch(login(username, password));\r\n        },\r\n        loadUser: () => {\r\n            dispatch(loadUser());\r\n        },\r\n        clearErr: () => {\r\n            dispatch(clearErr());\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\Register.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\AwaitingVerification.js",["121"],"import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {verify} from \"../../Actions/userActions.js\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport authAction from \"../../Actions/authActions\";\r\nimport {resendVerify} from \"../../Actions/userActions\";\r\nimport {\r\n    EmailIcon\r\n} from \"@chakra-ui/icons\";\r\nimport {\r\n    Flex, \r\n    Button,\r\n    Heading,\r\n    Box,\r\n    Alert,\r\n    AlertIcon\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\nfunction AwaitingVerification({isLogged, isLoaded, authAction, emailSent, emailError}) {\r\n\r\n    const history = useHistory();\r\n\r\n    function resendEmail() {\r\n        authAction(resendVerify);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isLoaded && !isLogged) {\r\n            history.push(\"/\");\r\n        }\r\n    })\r\n    \r\n    return (\r\n    <Flex direction=\"column\" align=\"center\" justify=\"center\" height=\"lg\">\r\n        <Box>\r\n            <Heading as=\"h3\">\r\n                Please check your email to verify your account\r\n            </Heading>\r\n        </Box>\r\n        <Box mt=\"6\">\r\n            <Button isDisabled={emailSent || emailError} size=\"lg\" onClick={resendEmail} leftIcon={<EmailIcon />}>\r\n                Resend\r\n            </Button>\r\n        </Box>\r\n        <Flex mt=\"6\" w=\"100%\" justify=\"center\">\r\n            <Box w={[\"50%\",\"30%\",\"15%\"]}>\r\n            {emailSent && <Alert status=\"success\"><AlertIcon />Email Resent</Alert>}\r\n            {emailError && <Alert status=\"error\"><AlertIcon />An error occurred in resending email</Alert>}\r\n            </Box>\r\n        </Flex>\r\n    </Flex>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        verified: state.user.verified,\r\n        isLogged: state.user.isLogged,\r\n        isLoaded: state.user.isLoaded,\r\n        emailSent: state.user.emailSent,\r\n        emailError: state.user.emailError\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        authAction: (action, params) => {\r\n            dispatch(authAction(action, params));\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AwaitingVerification);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\Nav.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Containers\\LandingPage.js",["122","123","124","125","126"],"import React, { useEffect } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Flex,\r\n    Heading,\r\n    Text,\r\n    SlideFade,\r\n    Alert,\r\n    AlertIcon,\r\n    AlertTitle,\r\n    AlertDescription,\r\n  } from \"@chakra-ui/react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nfunction LandingPage() {\r\n    const history = useHistory();\r\n\r\n    function handleGetStarted() {\r\n        history.push(\"/register\");\r\n    }\r\n\r\n    return(\r\n    // <Center>\r\n    <SlideFade in>\r\n    <Flex direction=\"column\" justify=\"center\">\r\n        <Heading as=\"h1\" textAlign=\"center\" size=\"4xl\" mt=\"100\">\r\n            <Box as=\"span\">\r\n            Stay on Top with <br/>\r\n            Grade-<Box as=\"span\"color=\"#6ABFFD\">calc</Box>\r\n            </Box>\r\n        </Heading>\r\n        <Text align=\"center\" fontSize=\"lg\" m=\"3\">\r\n            Offering an easy way to <Box as=\"span\" color=\"#6ABFFD\">track your courses</Box>. <br/>Simply Register, add your courses, and start tracking. \r\n        </Text>\r\n        <Box as=\"span\" align=\"center\">\r\n        <Button size=\"lg\" bg=\"#6ABFFD\" color=\"white\" borderRadius=\"md\" onClick={handleGetStarted}> Get Started</Button>\r\n        </Box>\r\n    </Flex>\r\n    {/* {isExpired && <Alert status=\"info\"><AlertIcon />Your Session has Expired</Alert>} */}\r\n    </SlideFade>\r\n    // </Center>\r\n    );\r\n\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isLogged: state.user.isLogged,\r\n        isLoaded: state.user.isLoaded,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {})(LandingPage);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\ProtectedRoutes.js",["127"],"import React, {useEffect} from 'react';\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAccessToken} from \"../../utils/accessToken\";\r\nimport { loadUser } from '../../Actions/userActions';\r\n\r\n/**\r\n * \r\n *  Check if the user has an access Token in memory, redirect if they are not authorized\r\n * on a protected route\r\n * \r\n */\r\n\r\n\r\nfunction ProtectedRoute({component: Component, verified, loadUser, isLoaded, ...rest}) {\r\n    if(isLoaded && !getAccessToken()) {\r\n        return <Redirect to=\"/\"/>;\r\n    }\r\n\r\n    return <Route \r\n    {...rest} render={(props) => {\r\n        return <Component {...props} />;\r\n    }}/>\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        loadUser: () => {\r\n            dispatch(loadUser());\r\n        }\r\n    }\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        verified: state.user.verified,\r\n        isLoaded: state.user.isLoaded\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProtectedRoute);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\authActions.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\userActions.js",["128"],"import {setAccessToken, getAccessToken} from \"../utils/accessToken.js\";\r\nimport setAuth from \"../utils/setAuth\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport axiosConfig from \"../utils/axiosConfig\";\r\n\r\nexport const login = (user, pass) => async (dispatch) => {\r\n    const url = \"/users/login\";\r\n    const body = {username: user, password: pass};\r\n    axiosConfig.post(url, body, {withCredentials: true})\r\n    .then((res) => {\r\n        //dispatch to state\r\n        setAccessToken(res.data.token);\r\n        dispatch({\r\n            type: \"LOGIN\",\r\n            payload: res.data\r\n        });\r\n        setAuth(getAccessToken());\r\n        dispatch(loadUser());\r\n        return <Redirect to=\"/profile\"/>\r\n    })\r\n    .catch((err) => {\r\n        if(err.response) {\r\n            if(err.response.status === 409 && err.response.data.type === \"password\") {\r\n                dispatch({\r\n                    type: \"INVALID_PASS\"\r\n                });\r\n            }\r\n            else if(err.response.status === 409 && err.response.data.type === \"username\") {\r\n                console.log(\"invaliduser\");\r\n                dispatch({\r\n                    type: \"INVALID_USER\"\r\n                })\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport const resendVerify = () => async (dispatch) => {\r\n    let url = \"/users/resend\"\r\n    axiosConfig.post(url)\r\n    .then((response) => {\r\n        dispatch({\r\n            type: \"EMAIL_SENT\"\r\n        })\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: \"SEND_EMAIL_ERROR\"\r\n        });\r\n    })\r\n}\r\n\r\nexport const verify = (id) => async (dispatch) => {\r\n    let body = {id: id};\r\n    axiosConfig.post('/users/verify', body)\r\n    .then((res) => {\r\n        if(res.status != 200) {\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: \"EMAIL_VERIFIED\"\r\n            });\r\n        }\r\n    })\r\n}\r\n\r\nexport const expiredSession = () => async dispatch => {\r\n    dispatch({\r\n        type: \"EXPIRED_SESSION\"\r\n    });\r\n    dispatch(logout());\r\n}\r\n\r\nexport const register = (email, username, password) => async (dispatch) => {\r\n    let body = {email: email, username: username, password: password};\r\n    axiosConfig.post('/users/register', body)\r\n    .then((res) => {\r\n        dispatch(login(username, password));\r\n        dispatch(loadUser());\r\n        return <Redirect to=\"profile\" />\r\n    })\r\n    .catch((err) => {\r\n        if(err.response) {\r\n            if(err.response.status === 409 && err.response.data === \"INVALID_USER\") {\r\n                dispatch({\r\n                    type: \"INVALID_USER\"\r\n                });\r\n            }\r\n            else if(err.response.status === 409 && err.response.data === \"INVALID_EMAIL\") {\r\n                dispatch ({\r\n                    type: \"INVALID_EMAIL\"\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * On logout clear the refresh token in their cookie\r\n */\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let url = \"/users/clearcookie\";\r\n    axiosConfig.delete(url, {withCredentials: true}).then((response) => {\r\n        dispatch({\r\n            type: \"LOGOUT\"\r\n        });\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * On every page load, fetch the data if we were able to get the data from the server,\r\n * dispatch to state. Else dispatch that the user was not able to be loaded\r\n */\r\n\r\nexport const loadUser = () => async dispatch => {\r\n    let url = \"/courses/fetch\";\r\n    axiosConfig.get(url, {withCredentials: true})\r\n    .then((courses) => {\r\n        console.log(courses.data);\r\n        url = \"/users/loadverify\";\r\n        axiosConfig.get(url).then((verified) => {\r\n            console.log(courses.data);\r\n            dispatch({\r\n                type: \"USER_LOADED\",\r\n                payload: {courses: courses.data, verified: verified.data}\r\n            })\r\n        });\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: \"USER_NOT_LOADED\"\r\n        });\r\n    })\r\n}\r\n","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\Calculator.js",["129","130"],"import React, {useState, useRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {updateCourse} from \"../../Actions/courseActions.js\";\r\nimport {DeleteIcon, ArrowBackIcon, AddIcon} from \"@chakra-ui/icons\";\r\nimport authAction from \"../../Actions/authActions\";\r\nimport {\r\n    Input,\r\n    Flex,\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    Heading,\r\n    SimpleGrid,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalCloseButton,\r\n    useDisclosure,\r\n    SlideFade,\r\n    Spinner\r\n} from \"@chakra-ui/react\";\r\nfunction Calculator({handle, course, authAction, gradeColour}) {\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const [modifygrades, setmodify] = useState(() => course ? course.grades : [['', ''], ['', ''], ['', '']]);\r\n    const [showfinal, setshowfinal] = useState(false);\r\n    const [finalgrade, setfinalgrade] = useState(() => course ? course.finalgrade : 0);\r\n    const [calculatingGrade, setSpinner] = useState(false);\r\n    const [confirmdeleteindex, setconfirmdelete] = useState(0);\r\n    const initialRef = useRef();\r\n\r\n\r\n    function removegrade(index) {\r\n        setmodify(prev_grades => {\r\n            const lst = [...prev_grades];\r\n            lst.splice(index, 1);\r\n            calculate(lst);\r\n            return lst;\r\n        });\r\n    }\r\n\r\n    function removegradehandle(e) {\r\n        const id = e.currentTarget.id;\r\n        if(modifygrades[id][0] !== \"\" || modifygrades[id][1] !== \"\") {\r\n            onOpen();\r\n            setconfirmdelete(id);\r\n        }\r\n        else {\r\n            removegrade(id);\r\n        }\r\n\r\n    }\r\n\r\n    function handleReturn() {\r\n        if(showfinal) {\r\n            setshowfinal(false);\r\n        }\r\n        else {\r\n            saveResults();\r\n            handle(true);\r\n        }\r\n    }\r\n\r\n    function checkEmptyFields(grades) {\r\n        let emptyfields = grades.map((lst) => lst.filter((field) => field !== ''));\r\n        if((emptyfields.filter((lst) => lst.length > 1)).length == 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function calculate(grades) {\r\n        setfinalgrade(() => {\r\n            let grade = 0;\r\n            let weight = 0;\r\n            let final = 0;\r\n            if(checkEmptyFields(grades)) {\r\n                return -1;\r\n            }\r\n            for(let i=0; i < grades.length; i++) {\r\n                if(grades[i][0] !== '' && grades[i][1] !== ''){\r\n                    grade += grades[i][0] * (grades[i][1]) / 100;\r\n                    weight += grades[i][1] / 100;\r\n                }\r\n            }\r\n            if(weight > 0) {\r\n                final = (grade/weight).toFixed(0);\r\n            }\r\n            return final;\r\n        })\r\n    }\r\n\r\n    async function saveResults() {\r\n        course.grades = modifygrades;\r\n        course.finalgrade = finalgrade;\r\n        let params = [course];\r\n        authAction(updateCourse, params);\r\n    }\r\n\r\n\r\n    function inputHandle(e) {\r\n        setSpinner(true);\r\n        setmodify(prev_grades => {\r\n            const lst = [...prev_grades];\r\n            lst[e.target.id][e.target.name] = e.target.value;\r\n            calculate(lst);\r\n            return lst;\r\n        });\r\n        setTimeout(() => {setSpinner(false)}, 200);\r\n    }\r\n\r\n    function addgrade() {\r\n        setmodify(prev_grades => {return [...prev_grades, ['','']]});\r\n    }\r\n\r\n\r\n    function renderGrades() {\r\n        let display = [];\r\n        if(modifygrades !== undefined) {\r\n            for(var i=0; i < modifygrades.length; i++) {\r\n                display.push(\r\n                <Flex>\r\n                    <Input bg=\"white\" m=\"2\" id={i.toString()} name={\"0\"} onChange={(e) => inputHandle(e)} value={modifygrades[i][0]} key={\"GradeField\"+ i} placeholder=\"Grade\"></Input>\r\n                    <Input bg=\"white\" m=\"2\" id={i.toString()} name={\"1\"} onChange={(e) => inputHandle(e)} value={modifygrades[i][1]} key={\"WeightField\"+ i} placeholder=\"Weight\"></Input>\r\n                    <IconButton m=\"2\" onClick={(e) => removegradehandle(e)} id={i.toString()} icon={<DeleteIcon />} key={\"RemoveGrade\" + i}></IconButton>\r\n                </Flex>\r\n                );\r\n            }\r\n        }\r\n        return display;\r\n    }\r\n\r\n    return (\r\n    <Flex mt=\"5\" minH={[\"40vh\",\"30vh\",\"20vh\"]}>\r\n    <SlideFade in>\r\n    <Flex direction=\"column\" alignItems=\"center\" p=\"5\" rounded=\"md\" bg=\"#6ABFFD\" minW=\"20vw\">\r\n        <SimpleGrid w=\"100%\" columns={3} mb=\"7\" alignItems=\"center\">\r\n            <IconButton isRound size=\"md\" w=\"20%\" icon={<ArrowBackIcon/>} onClick={() => handleReturn()}>\r\n            </IconButton>\r\n            <Heading color=\"white\">{course.coursename}</Heading>\r\n        </SimpleGrid>\r\n        {!showfinal && renderGrades()}\r\n        <Button m=\"4\" w=\"20%\" onClick={addgrade} leftIcon={<AddIcon />}>Add</Button>\r\n        <Modal isCentered isOpen={isOpen} onClose={onClose} initialFocusRef={initialRef}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Fields for this grade are not empty</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalFooter>\r\n            <Button  mr={3} onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button colorScheme=\"blue\" ref={initialRef} onClick={() => {removegrade(confirmdeleteindex); onClose();}}>Confirm</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n    </SlideFade>\r\n    <SlideFade in offsetX=\"-20px\">\r\n    <Box ml=\"3\" minW=\"20vw\" h=\"30vh\" bg=\"#6ABFFD\" p=\"5\" rounded=\"md\">\r\n        <Heading color=\"white\">Grade Calculated</Heading>\r\n        <Flex alignContent=\"center\" alignItems=\"center\" justify=\"center\" h=\"100%\" w=\"100%\">\r\n            {!calculatingGrade &&<Heading as=\"h1\" size=\"3xl\" color={gradeColour(finalgrade)} >{finalgrade == -1 ? 'No Grades' : finalgrade + \"%\"}</Heading>}\r\n            {calculatingGrade && <Spinner />}\r\n        </Flex>\r\n    </Box>\r\n    </SlideFade>\r\n    </Flex>\r\n    );\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        authAction: (action, params) => {\r\n            dispatch(authAction(action, params));\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(undefined, mapDispatchToProps)(Calculator);","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\Courses.js",["131","132"],"import React, {useEffect, useState, useRef} from 'react';\r\nimport {DeleteIcon, EditIcon} from \"@chakra-ui/icons\";\r\nimport {\r\n  Flex,\r\n  Box,\r\n  IconButton,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n  Button\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\nexport default function Courses({course, index, handler, gradeColour}) {\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n  const initialRef = useRef();\r\n\r\n  const [courseinfo, setcourseinfo] = useState(() => {\r\n    return course;\r\n  });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if(course) {\r\n      setcourseinfo(course)\r\n    }\r\n  }, [course]);\r\n\r\n  return (\r\n    <Flex justify=\"center\" alignItems=\"center\" value={index} bg=\"#6ABFFD\" direction=\"column\"  rounded=\"md\" p=\"8\">\r\n      {/* <Flex justify=\"center\"direction=\"column\" alignItems=\"center\" borderRadius={4}> */}\r\n        <Box fontWeight=\"semibold\" color=\"white\" as=\"h4\" fontSize={\"4xl\"} maxW={[\"25vw\",\"25vw\",\"15vw\"]} isTruncated mb=\"2\">\r\n          {courseinfo.coursename}\r\n        </Box>\r\n        <Box fontWeight=\"semibold\" color={gradeColour(courseinfo.finalgrade)} as=\"h4\" fontSize=\"3xl\" isTruncated mb=\"10\">\r\n          {courseinfo.finalgrade == -1 ? 'No Grades' : courseinfo.finalgrade + '%'}\r\n        </Box>\r\n        <Box isTruncated >\r\n        <IconButton isRound mr=\"5\" size=\"md\" value={index} onClick={(e) => handler(e, \"MODIFY\")}icon={<EditIcon />}></IconButton>\r\n          <IconButton isRound ml=\"5\" size=\"md\"  onClick={onOpen}icon={<DeleteIcon />}></IconButton>\r\n        </Box>\r\n      {/* </Flex> */}\r\n      <Modal isCentered initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Delete Course?</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalFooter>\r\n            <Button  mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n            <Button ref={initialRef} colorScheme=\"blue\" value={index} onClick={(e) => {onClose(); handler(e, \"REMOVE\");}}>Confirm</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n\r\n}","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\addCourse.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\errorActions.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Actions\\courseActions.js",["133"],"import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuth.js\";\r\nimport axiosConfig from \"../utils/axiosConfig\";\r\n\r\nexport const loadCourse = (course) => async dispatch => {\r\n    dispatch({\r\n        type: \"LOAD_COURSE\",\r\n        payload: course      \r\n    });\r\n\r\n\r\n};\r\n\r\nexport const addCourse = (course) => async dispatch => {\r\n    if(localStorage.token != null) {\r\n        setAuthToken(localStorage.token);\r\n    }\r\n    let body = {\r\n        grades: course.grades,\r\n        coursename: course.coursename,\r\n        finalgrade: course.finalgrade\r\n    }\r\n    axiosConfig.post(\"/courses/add\", body)\r\n    .then((res) => dispatch({\r\n        type: \"COURSE_ADDED\",\r\n        payload: res.data.courseinfo\r\n    }))\r\n    .catch(err => console.log(err));\r\n}\r\n\r\nexport const deleteCourse = (course, id) => async dispatch => {\r\n    if(localStorage.token != null) {\r\n        setAuthToken(localStorage.token);\r\n    }\r\n    axiosConfig.delete(\"/courses/delete\", {data: course})\r\n    .then((res) => dispatch({\r\n        type: \"COURSE_REMOVED\",\r\n        payload: id\r\n    }))\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\nexport const updateCourse = (course) => async dispatch => {\r\n    let body = {\r\n        grades: course.grades,\r\n        username: course.username,\r\n        coursename: course.coursename,\r\n        finalgrade: course.finalgrade\r\n    };\r\n    axiosConfig.post(\"/courses/update\", body)\r\n    .then((res) => console.log(res))\r\n    .catch(err => console.log(err));\r\n};","C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Reducers\\userReducer.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Reducers\\errorReducers.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\utils\\accessToken.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\Components\\Specialized\\addCourseModal.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\utils\\setAuth.js",[],"C:\\Users\\imphu\\Projects\\simple-calc\\client\\src\\utils\\axiosConfig.js",[],{"ruleId":"134","severity":1,"message":"135","line":6,"column":8,"nodeType":"136","messageId":"137","endLine":6,"endColumn":13},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":22,"column":8,"nodeType":"144","endLine":22,"endColumn":18,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"146","line":20,"column":5,"nodeType":"136","messageId":"137","endLine":20,"endColumn":14},{"ruleId":"134","severity":1,"message":"147","line":29,"column":5,"nodeType":"136","messageId":"137","endLine":29,"endColumn":21},{"ruleId":"134","severity":1,"message":"148","line":125,"column":16,"nodeType":"136","messageId":"137","endLine":125,"endColumn":26},{"ruleId":"134","severity":1,"message":"149","line":3,"column":9,"nodeType":"136","messageId":"137","endLine":3,"endColumn":15},{"ruleId":"134","severity":1,"message":"150","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"151","line":9,"column":5,"nodeType":"136","messageId":"137","endLine":9,"endColumn":10},{"ruleId":"134","severity":1,"message":"152","line":10,"column":5,"nodeType":"136","messageId":"137","endLine":10,"endColumn":14},{"ruleId":"134","severity":1,"message":"153","line":11,"column":5,"nodeType":"136","messageId":"137","endLine":11,"endColumn":15},{"ruleId":"134","severity":1,"message":"147","line":12,"column":5,"nodeType":"136","messageId":"137","endLine":12,"endColumn":21},{"ruleId":"134","severity":1,"message":"150","line":1,"column":16,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":57,"column":23,"nodeType":"156","messageId":"157","endLine":57,"endColumn":25},{"ruleId":"154","severity":1,"message":"158","line":67,"column":65,"nodeType":"156","messageId":"157","endLine":67,"endColumn":67},{"ruleId":"154","severity":1,"message":"158","line":164,"column":107,"nodeType":"156","messageId":"157","endLine":164,"endColumn":109},{"ruleId":"134","severity":1,"message":"159","line":12,"column":3,"nodeType":"136","messageId":"137","endLine":12,"endColumn":12},{"ruleId":"154","severity":1,"message":"158","line":44,"column":34,"nodeType":"156","messageId":"157","endLine":44,"endColumn":36},{"ruleId":"134","severity":1,"message":"135","line":1,"column":8,"nodeType":"136","messageId":"137","endLine":1,"endColumn":13},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-native-reassign",["160"],"no-negated-in-lhs",["161"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'match.params.id', and 'verify'. Either include them or remove the dependency array. If 'verify' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["162"],"'SlideFade' is defined but never used.","'AlertDescription' is defined but never used.","'SubmitForm' is defined but never used.","'verify' is defined but never used.","'useEffect' is defined but never used.","'Alert' is defined but never used.","'AlertIcon' is defined but never used.","'AlertTitle' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'ModalBody' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},"Update the dependencies array to be: [history, match.params.id, verified, verify]",{"range":"165","text":"166"},[559,569],"[history, match.params.id, verified, verify]"]